{
  "posts": [
    {
      "id": 1,
      "title": "【愛在大都會】探索愛、真實與自我，都市男女久違的純愛心動",
      "createAt": 1612224000,
      "author": "Jam Jam",
      "description": "由 kakao TV 製作推出，一集只有 30 分鐘的實驗劇。都市男女是一齣仿戀愛真人秀的劇集，每集主人公們都會出來回答訪談問題，有趣的是節目在開頭就說，訪談對象說的可能不是真話！",
      "imageUrl": "https://github.com/jamie-cloud99/isJam/blob/main/public/images/posts/01_Lovestruck_in_the_city/01.jpg?raw=true",
      "isPublic": true,
      "tag": [
        "浪漫愛情",
        "韓劇",
        "喜劇",
        "療癒"
      ],
      "imageUrlList": [
        "https://github.com/jamie-cloud99/isJam/blob/main/public/images/posts/01_Lovestruck_in_the_city/01.jpg?raw=true"
      ],
      "postType": "跟播紀錄",
      "category": "video",
      "content": "<p class=\"mb-4\">從兩人初相遇，宰元就對善雅這個奇特的女孩感到好奇。很顯然地，宰元陷入愛情了。不禁讓人想起在韓劇《春夜》中，女主角李靜仁的同事兼好友，也曾對她說：「對某個人感到好奇可是個重要徵兆，因為你會時時想起他，那就代表你對他有興趣。」</p>\n<p class=\"mb-4\">有多久沒有對人感到好奇了呢？好想念啊拼命想要認識一個人，渴望被對方認識的小心思。既大膽妄為又小心翼翼的我，真懷念啊！</p>\n<p class=\"mb-4\"><img src=\"https://github.com/jamie-cloud99/isJam/blob/main/public/images/posts/01_Lovestruck_in_the_city/02.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"853\"></p>\n<p class=\"mb-4\">尹善雅明亮、充滿活力，屬於她的畫面是熱情高漲的，在車上高歌、牽著狗兒在沙灘上奔跑、笑容燦爛真誠，行為鬼靈精怪卻讓人為她瘋狂，她是如此閃耀，在襄陽的白天夜晚，宰元徹底向她臣服。可是回到首爾，尹善雅說，我叫李恩梧，你愛上的不是真正的我。然而，在第三集的時侯，恩梧不就選擇拋下過去的自己，想要做為尹善雅而活了嗎，為什麼又會這麼想呢？恩梧到底是個怎麼樣的女孩，我很好奇。</p>\n<p class=\"mb-4\">目前看到第五集，感受到劇集想探討的議題：真實/謊言、平凡/特別、個人的獨一無二、一段關係的結束、尋找自我（真實的我與另一個我）</p>\n<p class=\"mb-4\">(更新)第6集結尾的番外小劇場太有趣了，在《RUN ON》中也有這種手法，不曉得是否為近來韓劇熱衷的表現方式？劇中劇的形式為都會劇開拓更寬廣的發展空間，避免沒有強烈起伏、貼近日常的情節讓觀眾感到疲乏，如何有趣又不突兀的出現在戲劇中，可說是相當挑戰導演功力的一種挑戰。加上就我對自己觀影經驗的觀察，即便該集劇情平淡，沒有特別精彩的戲碼，但只要有個令人眼睛為之一亮的結尾，就會覺得這集很精彩，因此如何將結尾設計的新穎巧妙，也是決定一齣戲成敗的重要關鍵。</p>\n<h4 class=\"text-xl font-bold mt-8 mb-4 text-stone-900\">都市男女語錄</h4>\n<p class=\" text-stone-700 mb-3\">今日事不今日畢，天也不會塌下來，這是我的人生哲學。</p>\n<p class=\"text-right text-stone-700\">&mdash;&mdash; 朴宰元</p>"
    },
    {
      "author": "JamJam",
      "imageListUrl": [],
      "isPublic": true,
      "tag": [
        "韓樂",
        "樂團",
        "音綜",
        "選秀"
      ],
      "createAt": 1692316800,
      "title": "音樂天才的盛宴《Super Band 2》(1)—— 誰是我的初 pick？",
      "postType": "入坑紀實",
      "category": "music",
      "description": "兜兜轉轉，與曾經棄追的樂團選秀再次相愛！Jam 唯一推薦韓國樂團選秀《Super Band》第二季，遲來兩年的偽跟播紀錄～",
      "imageUrl": "https://github.com/jamie-cloud99/isJam/blob/main/public/images/posts/07_Super_band_2/02.jpg?raw=true",
      "id": 2,
      "content": "<p class=\"mb-4\">無意間點開尹尚的音樂節目《致你的音樂》貝斯特輯，嘉賓是 趙元祥、 寄旭（CyA）、卞禎浩。前二，一位是《Super Band》第一季（以下簡稱《超樂》）LUCY 出身、另一位則是有出演 Mnet 樂團選秀《Great Seoul Invasion》的樂團 ONEWE 的貝斯手，所以也略有印象；但全程最搶眼，看起來很優雅的卞禎浩，我居然不認識！他所屬的樂團 CNEMA 我也完全沒聽過！瞬間引爆我的好奇心，就這樣發現是《超樂》第二季組成的樂團，於是我這個上週才發誓不熬夜追音綜的女子，又不小心跌入《超樂 2》大坑。</p>\n<p class=\"mb-4\">當然邊看也要邊推坑，這篇就以 EP1- EP6 的舞台，主觀推薦讓我眼睛為之一亮的音樂人們吧！</p>\n<h2 class=\"text-xl lg:text-2xl mb-6 font-bold\">1. 絢麗的古典吉他女神 &mdash;&mdash; 張夏恩（장하은）</h2>\n<p class=\"mb-4\">首先是，一說話就會露出傻傻甜笑的夏恩，還以為是可愛羞澀的音樂新人，結果一上舞台，瞬間用細膩的琴聲，讓人凝神於她的音樂世界。不愧是來自吉他世家，擁有數百場海外演出經驗的隱士高手呢！加上沉浸在音樂時，夏恩那副專注神情、淺淺勾起的嘴角，以及猶如和吉他融為一體的肢體動作，都讓人深深感受到她對吉他的熱愛。</p>\n<p class=\"mb-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/pWSsArVPkqE\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<p class=\"mb-6 text-stone-700\">➤ 製作人選拔初舞台 QUEEN 〈Bohemian Rhapsody〉(波西米亞狂想曲)</p>\n<p class=\"mb-4\">更意外的是，在正賽第一輪舞台驚喜開嗓的夏恩，居然還有超甜美的純淨音色，和 DAVII 合聲配合渾然天成，簡直像出道多年的男女混聲組合，實在是個寶藏角色呢🤍</p>\n<p class=\"mb-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/1mhZ9djnyjw\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<p class=\"mb-6 text-stone-700\">➤ 正賽 2round 舞台 朴多蔚組自作曲〈青蛙〉- 大推⭐⭐⭐</p>\n<p class=\"mb-4\">&nbsp;</p>\n<h2 class=\"text-xl lg:text-2xl mb-6 font-bold\">2.&nbsp;十項全能演奏兼育兒&nbsp;國民叔叔 &mdash;&mdash; 金瑟雍（김슬옹）</h2>\n<p class=\"mb-4\">金瑟雍，這季的 zai.ro 老師 XDD 籤運一流爛，但有撕裂舞台的萬能實力，好喜歡看他帶著 12 歲的小多溫，起初看似好爸爸帶小孩，選曲、編曲、細節構思等苦功全部一人包，還叫弟弟先去玩，甚至很天才的把〈香菸店小姐〉改成適合小孩子的〈糖果店小姐〉。沒想到練習合奏時爆炸嚴格，一直：重來、重來、重來，慈父嚴師性格好加分😻（反正被唸的不是我　哈哈哈）</p>\n<p class=\"mb-4\">&nbsp;</p>\n<p class=\"mb-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/lORC61Fwh-M\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<p class=\"mb-6 text-stone-700\">➤ 正賽 1round 舞台 〈糖果店小姐〉（改編　任昌植〈香菸店小姐〉）- 推推⭐⭐</p>\n<p class=\"mb-6 text-stone-700\">&nbsp;</p>\n<h2 class=\"text-xl lg:text-2xl mb-6 font-bold\">3. Sexy 的化身 人間貝斯 &mdash;&mdash; 卞禎浩（변정호）</h2>\n<p class=\"mb-4\">看似冷都男，但講話聲音很溫柔，實際上是會躺在床上大笑的反差萌可愛鬼禎浩。舞台目標是「成為尹尚的男人」？結果一直被尹尚海王甩超好笑～ 演奏技巧、聲音掌控、舞台表現力太完美了，就是我心中的貝斯手模板，也是我的 1 Pick！但必須承認看到第八集都還沒出現讓我超級滿意的舞台，給我清醒一點禎浩哥，你的實力不只這樣的！雖然我只要看到他的鏡頭就快樂，但不要讓我變成盲目暈船仔啦～～</p>\n<p class=\"mb-4\">&nbsp;</p>\n<p class=\"mb-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/CxM0N8eAGLE\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<p class=\"mb-6 text-stone-700\">➤ 製作人選拔初舞台 Chris Brown〈Fun〉- 推推 ⭐⭐</p>\n<p class=\"mb-4\">&nbsp;</p>\n<h2 class=\"text-xl lg:text-2xl mb-6 font-bold\">4. 永不過時的傳統硬搖滾 &mdash;&mdash; Crack Shot</h2>\n<p class=\"mb-4\">搖滾不死～～～～說實話一開始看到他們出場，視覺強烈到我沒有很感興趣，但一看舞台馬上狂喊：搖滾就是要這樣！！！吉他的 tone 跟主唱的搖滾嗓，就素一個字「神」！每次尹鐘信評價他們很懂 40-50 歲的人喜歡什麼，我就汗顏 (⊙_(⊙_⊙)_⊙) ，原來我是老人喜好啦，新潮搖滾再怎麼有趣，還是原汁原味的 Hard Rock 最過癮阿！</p>\n<p class=\"mb-4\">成團八年次的 Crack Shot（2023 年已經十週年了），希望可以成為長長久久的樂團組合～</p>\n<p class=\"mb-4\">&nbsp;</p>\n<p class=\"mb-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/3TVflKv9JjI\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<p class=\"mb-6 text-stone-700\">➤ 正賽 1round 舞台 珍珠〈我沒關係〉- 搖滾迷必看 ⭐⭐⭐⭐</p>\n<p class=\"mb-4\">&nbsp;</p>\n<h2 class=\"text-xl lg:text-2xl mb-6 font-bold\">5. 其他：入坑邊緣參賽者推薦</h2>\n<ol class=\"mb-4 list-decimal space-y-6 list-inside \">\n<li>\n<h3 class=\"lg:text-xl font-bold mb-4 inline-block ml-2\">音色迷人組</h3>\n<ul class=\"list-disc space-y-3 indent-2 list-inside\">\n<li>任閏聲，剛退役的軍人歐巴，狂野低音王者，是我最喜歡的主唱音色！\n<div class=\"py-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/abDjSOMNT8o\" width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n</li>\n<li>金漢謙，擁有厚實顆粒嗓音，一頭狂野亂髮但近看很可愛的 19 歲搖滾 baby</li>\n<li>文秀珍，本季女主唱中我最愛的中低音色，讓人想依靠的溫柔姐姐</li>\n<li>J.UNA，太常聽他的歌了，沒有被驚喜到，但也是我想追的原因之一啦</li>\n<li>Ki Tak，聲音很溫柔，感覺是最適合音源的歌手，但更期待後續有形象反轉！</li>\n</ul>\n</li>\n<li>\n<h3 class=\"lg:text-xl font-bold mb-4 inline-block ml-2\">演奏天才組</h3>\n<ul class=\"list-disc space-y-3 indent-2 list-inside\">\n<li>金成鉉，被柳熙烈評為「這季的吉他」，某個角度長得很像 Gray，還有彈琴時搶眼的手臂肌肉 &gt; //// &lt;\n<div class=\"py-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/2IRCnIAKKVM\" width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n</li>\n<li>梁張世敏，我的第二 pick 貝斯，演奏〈Disco Yes〉身體會不自覺想跟著他的 groove 一起搖擺（因為版權關係只附<a class=\"underline text-stone-700\" href=\"https://youtu.be/RxGlK2pRNLw\">連結</a>）</li>\n<li>金准緒，從第一首選曲〈Falling Slowly〉就收穫我的心，琴聲有乾淨浪漫的少年感，還是我們吉他天才永所弟弟的親故兼音樂好夥伴，也有參與永所專輯的製作！\n<div class=\"py-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/o5ScdwA82lc\" width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n</li>\n<li>吳垠澈，《幻影歌手》音樂導演，這季的一拿五，個人認為是情緒傳染力最強的樂手</li>\n</ul>\n</li>\n<li>\n<h3 class=\"lg:text-xl font-bold mb-4 inline-block ml-2\">製作功臣組</h3>\n<ul class=\"list-disc space-y-3 indent-2 list-inside\">\n<li>綠豆，他的合成器流行曲風無敵，將 BLACKPINK 的〈Forever Young〉改成超級清爽的編曲，偷偷劇透第 9 集很像 Hong Issac 😂\n<div class=\"py-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/_KvVrujBeSM\" width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n</li>\n<li>DAVII，橫掃音源榜的製作人，擅長中毒性超強的 hook song，看完舞台後我腦海裡都是 개구~개구~ 青蛙~青蛙~(就是我推爆的夏恩的第二場舞台)</li>\n<li>黃賢朝，籌備舞台還會做超完整戰略簡報的腦性 DJ 製作人，帥氣的外表但聲音意外很柔軟🤩</li>\n<li>朴多蔚，看過的所有選秀中將韓國國樂與西洋樂器融合地最自然的樂手，總是讓人期待他的表演</li>\n</ul>\n</li>\n</ol>\n<p class=\"mb-4\">&nbsp;</p>\n<h2 class=\"text-xl lg:text-2xl mb-6 font-bold\">後記：真正的入坑契機是？</h2>\n<p class=\"mb-4\">過去一年，我已經養成每天選一首歌做為人生紀錄的習慣。但這個月不知為何，幾乎每天都很難挑選到合意的音樂，出現大歌荒危機。在串流平台上左挑右揀時，逐漸對 Crack Shot 這個樂團著迷了，怎麼能在抒情搖滾、金屬搖滾等不同曲風自由轉換，將充滿能量的表演跟細膩感性都做到極致，尤其是吉他演奏實在太優秀了，讓我印象深刻。</p>\n<p class=\"mb-4\">後來看到他們有《 超級樂隊 Super Band 2》發行的音源，讓剛看完相同製作團隊的男聲四重唱選秀《幻影歌手 Phantom Singer 3》，小小燃起想看樂團選秀的心。卞禎浩只是那臨門一腳，讓我放棄掙扎，原地入坑(❁&acute;◡`❁)&nbsp;</p>\n<p class=\"mb-4\">&nbsp;</p>\n<div class=\"py-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/4N43qTTOVDA\" width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n<p class=\"mb-6 text-stone-700\">➤ 크랙샷 (CrackShot) - 〈Goodbye My Love〉 我的入坑曲～自從看過他們本人後更驚訝怎麼連抒情也擅長了，如果是喜歡 YB Band 應該也會超愛</p>\n<p class=\"mb-4\">&nbsp;</p>\n<div class=\"py-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/BOONy9mvZbI\" width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n<p class=\"mb-6 text-stone-700\">➤ 크랙샷 (CrackShot) - 〈INFP〉我們 INFP也有歌捏，好快樂！一開始聽起來有點像灌籃高手的主題曲 😂😂</p>"
    },
    {
      "author": "JamJam",
      "imageListUrl": [],
      "isPublic": true,
      "tag": [
        "韓劇",
        "女性",
        "治癒",
        "反思"
      ],
      "createAt": 1685836800,
      "title": "細嚼慢嚥 《浪漫的體質》EP1 —— 關於我。醜陋的真實",
      "postType": "隨筆短篇",
      "content": "<p class=\"mb-4\">「我現在感受到的晦氣，是成功者自帶的晦氣嗎？還是我這沒出息的人，眼前帶有的假晦氣呢？」</p>\n<p class=\"mb-4\">「首先妳要成功，如果到時候妳還是覺得他晦氣，那說明他本身就晦氣。」</p>\n<p class=\"mb-4\">/</p>\n<p class=\"mb-4\">因為前陣子工作上合作過的 KOL 人設崩塌，就關注了一輪最近各種被踢爆的 KOL 失格新聞。一開始以為只是懷著看八卦的心態點進去，然而我卻慢慢意識，我渴望看到的，我目光停留之處，是那些狠狠批判他們，討伐他們過錯的留言。儘管是有理有據、看似為受害者出氣的言論，但我是正義嗎？不，我只是想看他們從神壇跌落的樣子。我，躲在螢幕背後，即使沒有敲打鍵盤，也漫湧著見獵心喜的惡意。</p>\n<p class=\"mb-4\">的確，我的確在過往就對這位 KOL 欠缺好感。但不想看見我不喜歡的人成功，就能順理成章地希望我不喜歡的人失敗嗎？</p>\n<p class=\"mb-4\">是因為這樣才能證明，我的不喜歡才是明智的，其他人都是受騙的笨蛋？還是他們僅僅是我這樣眼前佈滿晦氣，沒出息的人，胡亂宣洩自卑感的工具呢？</p>\n<p class=\"mb-4\">承認這樣醜陋的真實，並不能洗滌內心的黑暗。但至少在一片混濁中，我能瞥見自我的灰影。它歪歪斜斜跟在身後，但我會記得這是我的一部分，記得費心與之斡旋，不讓自己被黑夜吞沒。</p>\n<p class=\"mb-4\">&nbsp;</p>",
      "category": "video",
      "description": "陷入產出困難瓶頸好一陣子，於是先改以隨筆短篇降低發文門檻，主要是對劇情片段有感而發，所以力求真實，不求完整！",
      "imageUrl": "https://github.com/jamie-cloud99/isJam/blob/main/public/images/posts/03_Be_melodramatic/01.jpg?raw=true",
      "id": 3
    },
    {
      "author": "JamJam",
      "imageListUrl": [],
      "isPublic": true,
      "tag": [
        "韓劇",
        "文藝",
        "浪漫",
        "難以預測"
      ],
      "createAt": 1687651200,
      "title": "銀行員社內戀愛《愛情的理解》，文佳瑛 X 柳演錫共譜文藝現實愛情",
      "postType": "無雷推薦",
      "category": "video",
      "description": "倘若不以尋求解答為目的地觀看，像閒逛二手市集東翻翻西找找，反而能撞見許多藏有線索的寶盒。",
      "imageUrl": "https://github.com/jamie-cloud99/isJam/blob/main/public/images/posts/02_The_interest_of_love/01.jpg?raw=true",
      "content": "<p class=\"mb-4\">沒有台詞的鏡頭很多，像藝術品般無聲進行的動作、眼神、場景擺設等，即便觀眾一知半解也能感受美。時不時當作飯後甜點淺嚐幾口，讓舌尖浸潤於細膩綿長的香氣，比起當正餐大菜享用更能體會這部劇的趣味。</p>\n<p class=\"mb-4\">&nbsp;</p>\n<p class=\"mb-4\">/ 本篇無雷 請安心食用🤍/</p>\n<p class=\"mb-4\">&nbsp;</p>\n<p class=\"mb-4\">雖說是以氛圍、感覺、畫面為主的文藝愛情片，但演員的表現力誠然是觀眾能否自我投射的關鍵。劇集步調慢，因而能精雕細琢角色樣貌，讓角色間的愛恨交織富有戲劇性，卻不流於灑狗血，反倒忠實呈現現實人生的複雜多面，也幫助觀眾理解角色不完美的選擇。</p>\n<p class=\"mb-4\">文佳煐、柳演錫僅僅對視都能散發的強大CP感（正所謂眼神拉絲？）、四位主演互相抗衡、壓迫空氣的戲劇張力讓演技粉看得相當過癮（硬要說我覺得鄭家藍的演技在之中稍弱，鐘賢初期還算討喜的人設也沒有吸引到我，導致後半雖能理解他的難處卻無法憐惜他）</p>\n<p class=\"mb-4\">/</p>\n<p class=\"mb-4\">而《愛理》台詞講究的雙關美學，從劇名就可見一斑。</p>\n<p class=\"mb-4\">이해，既有理解，也有利害的意思。成年人的愛情，免不了金錢、身分、地位的思量算計，與對正確人生道路（不論數字或愛情）的渴望。</p>\n<p class=\"mb-4\">尤其在每天直面金錢、階級分明的銀行工作，為客戶、為自己尋找一個能累積 Profits 的選擇再自然不過了。只是算透利害關係後，就能理解愛情嗎？縝密計算後的關係還能稱作愛情嗎？愛情間的感性與理性，我們又該如何取得平衡呢？</p>\n<p class=\"mb-4\">（忽然想到 balance 在財務上也有「餘額」的意思，以金融業為背景，討論愛情利害真是很巧妙的設計）</p>\n<p class=\"mb-4\">/</p>\n<p class=\"mb-4\">「他們的愛情並不像童話或電影中的故事那般美麗。因為各自的理由而猶豫、動搖、退縮，有時甚至想逃跑。但即便愛得辛苦，依舊渴望著全然的愛。」</p>\n<p class=\"mb-4\">「為什麼我們對愛情如此痴迷？也許是因為愛情是人生最大的幻想。」</p>\n<p class=\"mb-4\">人們渴望愛情，卻厭惡面對愛的不堪。比起造一個完美愛情夢，《愛理》選擇用一連串犀利的提問引導觀眾「愛情是什麼？婚姻是什麼？你現在幸福嗎？」</p>\n<p class=\"mb-4\">不只談愛，更道盡愛情的生老病死。</p>\n<p class=\"mb-4\">什麼樣的情況會交往、會結婚？又是什麼樣的情況會分手？甚至會出軌？</p>\n<p class=\"mb-4\">愛情就像所有人際交往，可能有人犯錯，也可能有人受傷，但更重要的是，能否在這段關係中認識自己的內心，在愛情的理解中，理解自我，才能真正找到平穩的幸福。</p>\n<p class=\"mb-4\">/</p>\n<p class=\"mb-4\">🦥 尖尖米碎碎念</p>\n<p class=\"mb-4\">《愛情的理解》是我從去年末開始唯一 ｏｎ 檔追的劇，完全取向狙擊！首先是 JTBC 獨有的小眾文藝感（同類型的還有收視率同樣很差的《 #無法抗拒的他 》、《 #人間失格 》，確定是在推薦 ㅋㅋㅋㅋ）比起寫故事更像是去刻劃角色的情感生活，飄飄軟軟又微悲傷的氛圍，有種飲鴆止渴的快樂&hellip;???</p>\n<p class=\"mb-4\">其次是惹人憐愛（心疼）的主角，我太能理解常秀的猶豫不決，正因為珍惜這份心意，所以無法輕易開始，然而卻總是錯過相愛的時刻。喜歡的心意足以跟對方在一起嗎？足以克服性格、喜好、價值觀、身分背景的差異嗎？因為渴望跟對方維持常常久久的關係，所以不敢隨便交往的踟躕，任誰看來，都像是愛情笨蛋吧！</p>\n<p class=\"mb-4\">我也同感秀榮埋怨常秀為何不勇敢走向她的心境。因為對自己的不自信，更因為對對方的期待，我們都想收到不管不顧，全然為你一人的心意。那些故作冷漠、嘴硬拒絕、挾怨報復，我也想不透的幼稚行徑，不過是想為單薄的自我虛張聲勢。其實我也期望，我們之間只有愛就好了，只有愛就足夠了。</p>\n<p class=\"mb-4\">因為像看見自己，所以我知道常秀跟秀榮絕對是同種人。</p>\n<p class=\"mb-4\">所以無論如何，我都想為他們的幸福應援。</p>",
      "id": 4
    },
    {
      "author": "JamJam",
      "imageListUrl": [],
      "isPublic": true,
      "tag": [
        "韓劇",
        "浪漫",
        "內向人",
        "人生劇"
      ],
      "createAt": 1654128000,
      "title": "致我們的解放：《我的出走日記》療癒人生韓劇",
      "postType": "完食心得",
      "category": "video",
      "description": "「一步一步，舉步維艱地向前走」\n\n或許仍會沮喪、時而懷疑自我，可正是因為每一步都舉步維艱，才讓前進的動力被格外珍視，讓那些五秒、七秒微不足道的幸福變得值得紀念；接納自己的波動，高峰低谷都彌足珍貴。",
      "imageUrl": "https://github.com/jamie-cloud99/isJam/blob/main/public/images/posts/05_My_liberation_notes/01.jpg?raw=true",
      "content": "<p class=\"mb-4\">「我認為那就是解放的全貌，找出自己的問題點」</p>\n<p class=\"mb-4\">◍ 一天過去了，你是活了一天，還是活過一天？ ◍</p>\n<p class=\"mb-4\">長久以來，我心中都有個疑問，我是在生活，還是在生存？每當這樣的想法竄出，我總是很害怕。於是會跟自己說，是時機不對、是我還沒準備好、是活著真的很累，總有一天我會找到自己的路；藉口越多我就越疲憊，好像成天都在撒謊，用謊言安慰自己，用謊言讓我不如此討厭自己。</p>\n<p class=\"mb-4\">內心空虛的我撞見了《我的出走日記》，從一開始就自然而然地將自己投射在美貞身上，我也想找到一個人、一件事，來填滿自己，我想要被填滿。我以為這會是《出走》要帶給觀眾的：一個美夢，一個重新開始的人生，就像眾多強調勇氣、夢想、改變的戲劇一樣。</p>\n<p class=\"mb-4\">可是《出走》沒有，僅留下許多沒有答覆的空白、自言自語，然後告訴我們，這就是解放的全部了。解放沒有終點，只有開始。解放之後不會變得輕鬆，可能照樣事事不如意、可能周遭還是有一堆王八蛋，可能我們依舊來來回回地前進又後退，但我相信也不完全是徒勞無功吧！</p>\n<p class=\"mb-4\">◍ 因為解放，是一次又一次愛上自己的進程 ◍</p>\n<p class=\"mb-4\">「一步一步，舉步維艱地向前走」</p>\n<p class=\"mb-4\">或許仍會沮喪、時而懷疑自我，可正是因為每一步都舉步維艱，才讓前進的動力被格外珍視，讓那些五秒、七秒微不足道的幸福變得值得紀念；接納自己的波動，高峰低谷都彌足珍貴。</p>\n<p class=\"mb-4\">在上一篇貼文(EP13-14心得)我曾說，即使只是做為世上七十七億分之一的一元硬幣也無所謂，世界少了我不會怎樣也無所謂，我想要這樣生活。可是現在的我卻想要相信，我們從來不是世界上不重要的一塊，生命本是自然，我們的靈魂跨越軀體在宇宙中擴散著，是綿延不斷無須證明的存在；堂堂正正地喜歡如江北山岩般裸露的自我，是我們存在，就可以有的自信。</p>\n<p class=\"mb-4\">◍ 讓我們大聲地對世界呼喊：我在這裡！(昌熙tone) ◍</p>\n<p class=\"mb-4\">願每個在人生路上舉步維艱的你，</p>\n<p class=\"mb-4\">都能像瘋了一樣，覺得自己討人喜愛。</p>\n<p class=\"mb-4\">&nbsp;</p>\n<p class=\"mb-4\">&mdash;&mdash;&mdash;&mdash;&mdash;&mdash; ฅ՞&bull; &bull;՞ฅ &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>\n<p class=\"mb-4\">&nbsp;</p>\n<p class=\"mb-4\">🌟尖尖米的碎碎念</p>\n<p class=\"mb-4\">本來看完15集想說完蛋了，編劇又埋下這麼多未爆彈，16集如果沒有加爆時長，可能收尾會不漂亮；結果，16集編劇不僅閒情逸致地又多說了很多故事，前面那些沒說完的，因為沒有強行結尾，反而沒關係了，就當作我們無意間捕捉到廉家小片段，這本沒頭沒尾的日記、可能過了三、五年才會恍然大悟的曾經，就這樣一步一步，舉步維艱地陪我們走下去吧！</p>\n<p class=\"mb-4\">從劇中收穫感動不難，但這是第一次，我想因為這部劇做些什麼，為我自己做些什麼，期望我一直記得此刻的感受。下面是在寫這篇心得前，我寫給自己的解放日誌。無關戲劇大家可以pass，只是想誠實地為此刻的我留下紀錄。如果你願意，也歡迎和我一起，寫下屬於你的出走日記。</p>\n<p class=\"mb-4\">&nbsp;</p>\n<p class=\"mb-4\">&mdash;&mdash;&mdash;&mdash;&mdash;&mdash; 𝐌𝐘 𝐋𝐈𝐁𝐄𝐑𝐀𝐓𝐈𝐎𝐍 𝐍𝐎𝐓𝐄𝐒 &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>\n<p class=\"mb-4\">&nbsp;</p>\n<p class=\"mb-4\">❶ 我是個很慢很慢，像樹懶一樣什麼都很慢的人。連要認識自己，去做想做的事，都猶豫不決；總是陷入想改變，卻沒有行動的困局；所以我才會感到無力，歸咎於自己的渺小，埋怨世界運轉過快，厭惡自己得過且過，常常覺得...人間失格。</p>\n<p class=\"mb-4\">❷我常常忽視我的憤怒，在朋友/工作夥伴/上司眼中我是個很冷靜、情緒很穩定的人；我不會發火、不會在外人面前表現不安、不受他人情緒影響；可能是我演技真的很好吧(笑)，我以為我裝作不生氣，總是對人微笑，說服自己對方沒這麼糟，我就能過得很好。但這些沒有釋放的情緒，卻時刻飄散在腦海中擾亂著我，在我沒有集中精神的片刻，咒罵會突然湧起，開始想像一百種吵架回應，我以為我用這個方式維持穩定，但實際上我無時無刻不在打仗；明明只是醒來，我就累了，覺得自己的身體裡淌滿汙水。</p>\n<p class=\"mb-4\">❸我以為我的感受力很差，對週遭事物的變化不夠敏銳；但我最近發現，似乎是被我強行關掉了。高敏特質讓我必須將感受開關封閉，才得以在日常的雜訊中生存。只是疫情後，一個人的時間變多了，當我打開感官，我就忽然覺得這個世界好可愛。安靜地、恆遠地、我在這裡也好似不在這裡。既在遙遠山頭上，俯瞰世界；也在廣袤原野中仰望蒼穹。(好像無意間偷得神的快樂一樣竊喜著)</p>",
      "id": 5
    },
    {
      "author": "JamJam",
      "imageListUrl": [],
      "isPublic": true,
      "tag": [
        "閱讀心得",
        "小說",
        "觸動人心",
        "愛"
      ],
      "createAt": 1670716800,
      "title": "當我愛的時候，也第一次被愛《四月，她將到來》",
      "postType": "閱讀紀錄",
      "category": "book",
      "description": "我們懶得去愛了，覺得麻煩了。我們疏於累積、交流細微的感受。再這樣下去，我們將無法繼續走下去。我想找回失去的東西，即使它們只是剩下碎屑。",
      "imageUrl": "https://github.com/jamie-cloud99/isJam/blob/main/public/images/posts/08_April_she_is_coming/01.jpg?raw=true",
      "content": "<p class=\"mb-4\">已經久到想不起來，愛一個人是什麼樣的感覺？在與未婚妻彌生安排婚期的時刻，藤代收到初戀小春寄來的信。沒有想像中出格的舉動，無論話語和念頭都被藏了起來，沒人真正說出口。閱讀的過程中，我急切地想知道，他是否不愛她，她是否還愛著他，她是否也愛他？但故事沒有爆點，一切就在人與人的對話中，那一封封信件裡娓娓道來。誰也沒搞明白，應該濃烈卻模糊焦距的情感，朦朧素淡地像一幅膠彩畫在我眼前散開。</p>\n<p class=\"mb-4\">看到最後才明白，這不是個追究誰愛誰的故事。是找回愛的故事。明知那些可能會沉澱為親情，糊里糊塗當作習慣的愛情，為什麼還是會讓人陷入？</p>\n<p class=\"py-6 mb-4 text-base tracking-wide leading-relaxed text-primary/80\">「當我愛的時候，也第一次被愛。就像是日蝕。『我的愛』與『你的愛』同等重疊的時刻，只有一瞬間。無法避免的從今日之愛，轉變為明日之愛。但是，我認為只有曾經共同擁有那瞬間的兩人，才能依隨愛的變化。」</p>\n<p class=\"mb-4\">我想不僅是愛情，我們的興趣、工作（？）、人際關係、甚至是經營這一個小帳號，都無可避免地面對分不清愛與習慣的模樣。</p>\n<p class=\"mb-4\">「我們懶得去愛了，覺得麻煩了。我們疏於累積、交流細微的感受。再這樣下去，我們將無法繼續走下去。我想找回失去的東西，即使它們只是剩下碎屑。」</p>\n<p class=\"mb-4\">我想這也是我中斷影劇的分享，穿插讀書心得的原因。一直在失去感覺的地方逡巡，我將無法再走下去；我想暫時出走，梳理內心真正渴望的感動，才是我經營這個帳號更重要的目標。</p>\n<p class=\"mb-4\">也是到現在我才明白，我不是因為愛追劇而分享心得，我是愛被觸動的感覺，無論什麼媒材都無所謂，我只是需要有愛來形塑生命的輪廓，讓我能繼續在生活中翻滾、顫動。</p>\n<p class=\"mb-4\">&nbsp;</p>\n<div class=\"text-stone-700\">\n<h2 class=\"text-xl lg:text-2xl mb-6 font-bold\">直擊心臟的人物語錄</h2>\n<h3 class=\"lg:text-xl mb-4 font-bold\">奈奈</h3>\n<p class=\"mb-4\">大家對別人創造的價值觀太敏感了，是誰決定做為一個人就必須戀愛和做愛呢？雜誌或電視嗎？我覺得男女相處一定要戀愛的時代已經結束了。</p>\n<p class=\"mb-4\">想要吸引別人注意的時候，人就會變得無比溫柔、充滿魅力，但那只是一時的。得到之後，溫柔就會變成膚淺而不負責任。絕大多數人的目的，都是為了獲得別人的愛，而不是去愛人。而且只要對方的心意稍有不足之處，就會把它當成『他不夠愛我』的證明。不論男人或女人，都把自己溫柔的行為，和想被異性喜歡的願望，與真正的愛情混為一談了。因為真正的愛並不是這樣。若是真愛，應該會表現得更不體面、更笨拙。</p>\n<p class=\"mb-4\">&nbsp;</p>\n<h3 class=\"lg:text-xl mb-4 font-bold\">小春</h3>\n<p class=\"mb-4\">我想見見我自己，見見那時候愛著你的自己，見見那個心思率真時的自已。所以寫信給你。</p>\n<p class=\"mb-4\">當我愛的時候，也第一次被愛。就像是日蝕。「我的愛」與「你的愛」同等重疊的時刻，只有一瞬間。無法避免的從今日之愛，轉變為明日之愛。但是，我認為只有曾經共同擁有那瞬間的兩人，才能依隨愛的變化。</p>\n<p class=\"mb-4\">即使只有一瞬間，也希望你能成為與人共享愛情的人。</p>\n</div>",
      "id": 6
    },
    {
      "author": "JamJam",
      "imageListUrl": [],
      "isPublic": true,
      "tag": [
        "韓樂",
        "樂團",
        "音綜",
        "選秀"
      ],
      "createAt": 1692576000,
      "imageUrl": "https://i.ytimg.com/vi/IU6-kRIGO4M/hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLDwsZ7rGVrk487TXQBDN1G8LFzedw",
      "title": "真正的樂團出現了《Super Band 2》(2) ——爆發化學反應的 4 組舞台",
      "postType": "舞台推薦",
      "category": "music",
      "description": "《超級樂隊 2》進入第三回合組別排名爭奪賽，團隊的協和作用成為決勝關鍵，這篇分析 EP8-9 中，「團隊氛圍」、「編曲完整度」和「選手個人魅力」都充分展現的四個舞台，期望傳遞樂團音樂的多變能量。",
      "id": 7,
      "content": "<h2 class=\"text-xl lg:text-2xl mb-6 font-bold\">第三回合(組別排名爭奪賽)</h2>\n<h3 class=\"lg:text-xl font-bold mb-2\">鄭錫勳隊</h3>\n<p class=\"text-sm text-stone-400 mb-4 lg:text-base\">鄭錫勳（吉他）、文秀珍（主唱）、李東憲（主唱）、劉炳旭（打擊樂）</p>\n<p class=\"mb-4\">這組作為第一個舞台非常成功，選曲是 Jonas Brothers〈What a Man Gotta Do〉，表現輕快活潑的西部牛仔氛圍。音域不高，剛好適合文秀珍擅長的中音，發聲舒服，舞台表現也很自在。李東憲的聲音也不錯但聲量有點被壓制，小可惜。</p>\n<p class=\"mb-4\">不過和鄭錫勳兩人以一把木吉他對上一把電吉他，展現牛仔彼此爭鋒相對的編排，可說是點睛之筆，兩種吉他聲調更生動刻畫兩位角色的性格差異。配合可愛的肢體動作與默契十足的彈奏，以及整體流暢自然的編曲，是個讓人可以愉快享受，像迷你音樂劇般富有趣味的舞台。</p>\n<div class=\"py-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/C7_5EtRIF9M\" width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n<div class=\"py-4\">&nbsp;</div>\n<h3 class=\"lg:text-xl font-bold mb-2\">Willy K隊</h3>\n<p class=\"text-sm text-stone-400 mb-4 lg:text-base\">Willy K（吉他）、Vincent（主唱）、Danny Lee（鼓）、吳垠澈（鍵盤）</p>\n<p class=\"mb-4\">終於被拆散的 Crack Shot 照樣能創造出神級舞台！這次改編 Britney Spears〈Oops!... I Did It Again〉，挑戰中世紀哥德風。本來讚嘆選曲太強，神秘又詭譎的硬式搖滾，是只有　Crack Shot 才能表演的風格，然而我後來去查，才發現原曲竟然是首電子舞曲😳😳 ，好吧...果然是需要跪著欣賞的才華。</p>\n<p class=\"mb-4\">而且 Vincent 根本是演技派，每個語句都注入情緒，尤其他唱歌名那句 Oops!... I Did It Again ，一定要分享尹尚的神比喻：「本來生存千年的吸血鬼，戒了一百年的血，侵害了某人後發出的 Oops！I Did It Again」貼切得我笑倒在床上打滾。&nbsp;</p>\n<p class=\"mb-4\">吳垠澈則全然不像第一次加入的成員，華麗的琴聲、擴大空間感的合成器和 Willy K 的吉他相互交鋒，不僅為主唱鋪展歌曲的世界觀，更讓整個舞台的聲效衝破螢幕。即使完全不懂技術如我，也會被他們的表演給壓倒在地，相信如果是專業如評審與參賽者，一定更懂這個舞台有多強悍吧！</p>\n<div class=\"py-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/8sqd0xAVRaw\" width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n<div class=\"py-4\">&nbsp;</div>\n<h3 class=\"lg:text-xl font-bold mb-2\">J.UNA隊</h3>\n<p class=\"text-sm text-stone-400 mb-4 lg:text-base\">J.UNA（主唱）、張夏恩（古典吉他）、金鎮山（吉他）、鄭敏赫（吉他）</p>\n<p class=\"mb-4\">我要收回 J.UNA 的表演欠缺驚喜的話。他只是沒有遇上對的人～～～第一季有吉他三少年，這季則有更精湛、更有默契的吉他四人組。17 歲的吉他天才鎮山是最老練穩定節奏的選手，用他的獨特敲擊技巧，將吉他變身打擊樂器；聲壓不算大的 J.UNA 終於可以盡情發揮他最擅長的真假音轉換，吉他演奏也特別自由；夏恩的古典吉他不僅能演奏細膩柔和的導入，也能用和絃展現氣勢；敏赫則用電吉他和效果器擴展聲音廣度，填滿舞台空隙。</p>\n<p class=\"mb-4\">最重要的是，因為四個人都用心去感受彼此的樂聲，吉他像在唱合聲一樣和諧；每一次對視都訴說著彼此的信任與感動，成功將音樂人遇到知音的幸福，傳遞給台下。</p>\n<p class=\"mb-4\">實在是太太太感謝 J.UNA 的慧眼，用沒有人敢想像的巧思，讓每位吉他手都成為主角。</p>\n<div class=\"py-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/F-N8a1bxr3Y\" width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n<div class=\"py-4\">&nbsp;</div>\n<h3 class=\"lg:text-xl font-bold mb-2\">KiTak隊</h3>\n<p class=\"text-sm text-stone-400 mb-4 lg:text-base\">KiTak（主唱）、卞禎浩（貝斯）、金瑟雍（鼓）、任閏聲（主唱）</p>\n<p class=\"mb-4\">這組也同樣是遇到合適的隊友會飛上天的證明！說實話看完 J.UNA 組的舞台，我的 1pick 差點換成夏恩 。萬幸，卞禎浩在這集舞台力挽狂瀾，重新贏回我的心（在那邊自作多情）。</p>\n<p class=\"mb-4\">首先，必須盛讚 KiTak，原本溫柔的聲線鑲上金屬嘶啞的邊，配上音色滄桑沙啞的閏聲，像是新舊世代的強烈碰撞，為歌曲烘托出戲劇性。而且前幾集我完全不會特別注意 KiTak 的吉他，這次也進步太大了吧！那個聲調完全可以進 Willy K 隊了，律動也驚人的好。</p>\n<p class=\"mb-4\">而另一位主唱閏聲，演唱最厲害的點是他鬆弛有度的強弱控制，低音卻能唱出昂揚感，就像蓄勢待發的勇士，難道這就是軍人的魅力嗎？ 本隊的最大功臣，鼓手兼製作人金瑟雍，擅長編排具有立體環場感的編曲，我也特別喜歡他敲擊 TomTom 跟小鼓時，噠噠噠~噠噠噠~層層遞進的聲音。</p>\n<p class=\"mb-4\">&nbsp;至於，頭狂甩的我們禎浩，夾在鮮明的鼓聲和吉他間，扎實地穩固底部。在磅礡音浪席捲而來時，像磐石般緊緊抓住地面。所以觀眾依然能在一次次的震撼衝擊後，再次回到音場中心。明明他是台上跳最嗨的一個，貝斯還能彈得這麼穩，實在是太神奇了。果然有好主唱，好製作人，才能看見真正的禎浩，我沒有愛錯人～～</p>\n<p class=\"mb-4\">邊寫心得邊聽音源，更能體會到評審們所說：「是行雲流水的表演」。細聽整首歌，在進入新段落時，會用空拍懸浮觀眾的心，再以吉他、貝斯的合奏刷出厚度，搭配變化豐富的擊鼓，尤其最後段的過門簡直讓我的心臟像砧板上的魚一樣，狂跳不止。即便不看舞台表演，綿延不斷、動勢平衡的編曲，彷彿大雨後滾滾川流，奔放浩蕩，流轉不息。難以相信是首次配合的團隊，完整度高到令人頭皮發麻。</p>\n<div class=\"py-4\"><iframe class=\"aspect-auto w-full\" title=\"YouTube video player\" src=\"https://www.youtube.com/embed/mWviFqrUFrQ\" width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n<p class=\"mb-4\">&nbsp;</p>\n<h2 class=\"text-xl lg:text-2xl mb-6 font-bold\">後記：</h2>\n<p class=\"mb-4\">本來想第三跟第四回合一起寫的，結果發現才寫四個舞台，字數就跟我的愛一樣澎湃，只好留到下次了~ 因為上一篇寫太多廢話了，所以這次嘗試真摯一點看舞台，也因為是第一次寫關於音樂的分析，深刻感受到知識量跟詞彙量不足的痛苦，但換個角度想，也能展現身為普通觀眾被音樂自然喚起的感動吧？總歸是滿足了自認搖滾迷的自己。不知道大家覺得這樣的文風如何呢？</p>\n<p class=\"mb-4\">不過，無論怎麼寫，都寫不出我對禎浩的愛耶，真困擾 @@ 好想當迷妹為他爆寫兩千字喔～</p>"
    },
    {
      "author": "JamJam",
      "imageListUrl": [],
      "isPublic": true,
      "tag": [
        "電影",
        "獨立電影",
        "浪漫",
        "思考人生"
      ],
      "createAt": 1693008000,
      "title": "什麼留下了？什麼又流逝了？電影《之前的我們》隱晦而憂傷的跨海之愛",
      "postType": "觀影心得",
      "category": "video",
      "description": "「如果把這一世視為前世，那麼下一世我們會不會不一樣？」牽扯24年的跨海愛戀，是新的開始？或是遺憾的延續？",
      "imageUrl": "https://thedispatch.com/wp-content/uploads/2023/06/PastLives-Trailer-16x9_-Clean-1.jpg?w=816&h=542&crop=1",
      "id": 8,
      "content": "<p>強烈推薦配著 OST〈See You〉讀這篇文，再次沉淪電影結尾令人顫慄的悲傷。</p>\n<p>沒有大敘事的講述移民生活，說是愛情電影，不如說是關於愛、關於情的電影。其中緊扣著「因緣」和「前生」，這些帶有強烈東方色彩，對西方人神秘，對我們則再熟悉不過的概念。</p>\n<p>&nbsp;</p>\n<p>我們之間的緣分，是在 8000 年前就註定的嗎？</p>\n<p><img src=\"https://static01.nyt.com/images/2023/06/01/multimedia/01past-lives2-bcmh/01past-lives2-bcmh-jumbo.jpg?quality=75&amp;auto=webp\" alt=\"我們之間的緣分，是在8000年前就註定的嗎？-之前的我們 A24\" width=\"800\" height=\"430\"></p>\n<p>「因為是妳，所以妳一定會離開。<span class=\"t55VCb\">因為是</span>妳，我才會喜歡上妳。」<br>「雖然當時我只有12歲，但是我是愛著妳的。」</p>\n<p>&nbsp;</p>\n<p>聽到海聖講的這兩句話，我的心如乘坐一葉扁舟，以為只是依循風吹動水波微微晃動，卻開始盼望永遠不要上岸。在搭乘布魯克林的娜英和海聖，也有這種心情嗎？</p>\n<p><img src=\"https://hiff.org/wp-content/uploads/2023/04/Past-Lives-still-1.jpeg\" alt=\"\" width=\"1280\" height=\"720\"></p>\n<p>電影裡娜英（英文名：Nora）的丈夫 Arthur，也是非常值得一提，讓劇本更上層樓的角色。在觀影過程中，我俗套的以為，他會因為忌妒而做出什麼幼稚行徑，或是開始猜忌妻子而變得討厭？但他只有誠實地告訴妻子他的感受：不安、恐懼又束手無策的心情。還自嘲地說，自己是阻撓他們的邪惡白人丈夫。甚至在接待海聖時，沒有浮誇地裝親切，也不至於過分無禮的尺度拿捏。可以想像編導是如何用敏感細膩的心去勾勒角色，允許觀眾能不費力地貼近，產生共感。</p>\n<p><img src=\"https://compote.slate.com/images/3ed19c5e-6277-4989-8b5d-c31dbd338e36.jpeg?crop=1560%2C1040%2Cx0%2Cy0\" alt=\"\" width=\"1280\" height=\"853\"></p>\n<p>Nora 也是，在聽見丈夫的心聲後，沒有一絲隱瞞地，坦承自己的心，即便不確定那是什麼樣的感覺，也沒有用謊言掩蓋，這就是愛吧？勇敢的人們、信任的關係和確實的愛。人與人之間，可以坦白到這種程度嗎？情感可以這麼赤裸地，向他人揭露嗎？因為我從來沒有過這種程度的關係，所以格外地被打動。</p>\n<p><br>看完電影，娜英睽違 12 年聯繫上海聖，在馬路上興奮地奔跑，急著回家開通 Skype 視訊通話的身影，還是清晰地一次又一次地，在我腦海穿梭。心動、青澀、幸福的模樣，沒有消失，也被留在我們心中了。</p>\n<p><img src=\"https://static.independent.co.uk/2023/09/06/13/PL_01966_RC.jpg\" alt=\"\" width=\"1280\" height=\"853\"></p>\n<p>最後談談這部電影的配樂。</p>\n<p class=\"mb-6\"><br><br>娜英和海聖在 Uber 前的最後告別，便由〈See You〉這首配樂將濃郁的情緒，翻滾到最高潮地一刻。先以單音作開頭，積聚滯留不走的情，琴聲如浪潮層層打來，千思萬緒，瘋狂與克制，會將兩人捲在一起，或是越沖越遠呢？反覆的旋律堆疊，隨著大提琴的琴弓來回蕩漾。底部細碎零散的敲擊樂聲，則表現娜英和海聖牽扯 24 年，如同卡在腳趾縫的沙礫，那折磨又眷戀的情感。一切心意只能祝願來生，再見。<br><br><br></p>\n<p><iframe style=\"border-radius: 12px;\" src=\"https://open.spotify.com/embed/album/2JwAMKpwk4IolH2KhF6nPn?utm_source=generator&amp;theme=0\" width=\"100%\" height=\"352\" frameborder=\"0\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" allowfullscreen=\"allowfullscreen\" loading=\"lazy\"></iframe></p>"
    },
    {
      "author": "JamJam",
      "imageListUrl": [],
      "isPublic": true,
      "tag": [
        "JavaScript",
        "變數",
        "核心觀念",
        "前端"
      ],
      "createAt": 1687132800,
      "content": "<h2 class=\"text-xl lg:text-2xl mb-6 font-bold\">一、變數宣告</h2>\n<h3 class=\"lg:text-xl font-bold mb-2\">1.1 全域變數 / 全域屬性</h3>\n<ul class=\"list-disc list-inside mb-2\">\n<li>屬性可以用 delete 刪除，變數無法</li>\n<li>沒宣告的值會變成 全域屬性 &rArr; 容易被覆蓋或汙染全域環境，實戰中要避免</li>\n<li>用 var 直接宣告會變成全域變數，且 var 可以重複宣告</li>\n</ul>\n<pre class=\"mb-4\"><code>var a = '小明'; // (var 宣告) 全域變數， 也是 window 的屬性\nlet b = '杰倫'; // (let/const 宣告) 全域變數，不會出現在 window 的屬性\nc = 'Lena'; // (未宣告) 全域屬性 -&gt; window 的屬性 (不是變數)\nconsole.log(window); // 全域物件\n\ndelete window.a  // 變數無法被刪除\ndelete window.c  // 屬性會被刪除\n\nconsole.log(a) // 小明\nconsole.log(window.a) // 小明\nconsole.log(c) // c is not defined</code></pre>\n<h2>二、變數語法作用域</h2>\n<h3>2.1 JavaScript 是語法作用域 (Lexical Scope)</h3>\n<h3>2.2 var , let / const 作用域差異與實際影響</h3>\n<ul>\n<li>\n<p>var 是 函式作用域 &rArr; 實戰建議都不要用惹</p>\n<ul>\n<li>如果函式內沒有定義該變數，會向外查找，尋找外層的函式、作用域、到最外層的全域是否有該變數名稱，如果都沒有才會跳出 <code> UncaughtReferenceError: myName is not defined</code></li>\n</ul>\n</li>\n<li>let / const 是區塊作用域，<code>{}</code>可視為一個區塊 (block)，變數在區塊中使用完就會釋放，不用擔心汙染全域\n<ul>\n<li>包含 函式、for 迴圈、if 判斷式、純粹的大括號</li>\n<li class=\"list-none mt-2\">\n<pre><code>for (var i=0;i&lt;10;i++){}\nconsole.log(i)  // 10\n\nfor (let j=0;j&lt;10;j++){}\nconsole.log(j) // Uncaught ReferenceError: j is not defined</code></pre>\n<div class=\"callout callout-pink flex\">\n<p>💡</p>\n<p>雖然在 for 迴圈、if 判斷式 中 let 是寫在小括號內，但其宣告變數作用域等同於其後方大括號！！！</p>\n</div>\n</li>\n<li>此外 let 宣告的變數可重新賦值，const 宣告的變數則不行，宣告時要分清楚用途\n<ul>\n<li>根據Google的 JavaScript style guide，說明我們應該默認用<code>const</code>，如果該變數需要重新被賦值 ( 改變記憶體地址 ) 才用<code>let</code>，永遠不用<code>var</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>三、提升 Hoisting</h2>\n<h3>3.1 JS 運作分為兩階段：創造 &amp; 執行</h3>\n<ul>\n<li>創造階段(creation)：準備記憶體空間，(此時變數沒有值)</li>\n<li>執行階段(execution)：實際執行程式碼，才會賦值到變數上</li>\n</ul>\n<h3>3.2 var 可以先取值再宣告嗎？</h3>\n<ul>\n<li>宣告變數會在創造階段被提升到前面，但因為此時尚未賦值，所以還是取不到值 ( 系統會先給 undefined )。不過變數已存在，所以不會報錯</li>\n</ul>\n<pre><code>console.log(myName);  // undefined\nvar myName = '小明';</code></pre>\n<h3>3.3 let/const 在宣告前取值會出現錯誤</h3>\n<ul>\n<li>let/const 的 TDZ (Temporal dead zone) 暫時性死區，實際上還是有提升，只是會報錯！</li>\n</ul>\n<pre><code>console.log(myName);  // Uncaught ReferenceError: Cannot access 'myName' before initializtion\nlet myName = '小明';</code></pre>\n<div class=\"callout callout-pink flex\">\n<p>💡</p>\n<p>小結：<br>&bull; 在提升上，var 宣告的變數會自動初始化值為 undefined，因此在宣告前就使用變數，不會出現錯誤，而會是 undefined ；但是 let 與 const 宣告的變數則不會自動初始化，而是會進到暫時死區 (TDZ)，因此在 let 與 const 宣告變數前使用該變數，會出現錯誤。</p>\n</div>\n<h3>3.4 函式陳述式 優先提升</h3>\n<ul>\n<li><span role=\"img\" aria-label=\"✨\">✨</span><span class=\"notion-enable-hover\" data-token-index=\"1\">函式陳述式</span> 優先所有變數提升</li>\n<li><span role=\"img\" aria-label=\"✨\">✨</span>函式陳述式在創造階段就會完整提升整個函式</li>\n<li>如果想要把函式放在所有程式碼的後面，就一定要用函式陳述式的寫法，不能用表達式喔\n<pre><code>// 函式表達式\nvar callName = function() {\n\tconsole.log('我是恩娣')\n}\n\n// 函式陳述式  -- 優先提升到最前方\nfunction callName() {\n\tconsole.log('我是小明')\n}\n\ncallName()  // '我是恩娣'</code></pre>\n</li>\n</ul>\n<div class=\"callout callout-pink flex\">\n<p>💡</p>\n<p>判斷這類題目須留意 <br>1. 是用什麼宣告的： var 或 let/const <br>2. 是函數陳述式，或是函式表達式/一般變數 <br>3. 是否混合區域變數與全域變數</p>\n</div>\n<h2>四、undefined, is not defined &amp; null</h2>\n<h3>4.1 出現情境</h3>\n<ul>\n<li><code>undefined</code> 是宣告變數後，系統給變數的預設值</li>\n<li><code>is not defined</code> 是未宣告變數時，出現的錯誤(後續程式碼無法執行)</li>\n<li><code>null</code> 是自己手動賦予的空值</li>\n</ul>\n<h3>4.2 undefined 其他狀況</h3>\n<ul>\n<li>當物件屬性不存在時</li>\n<li>當不確定屬性是否存在，又要使用更深層的值時，請使用 可選串連<code>?.</code> 避免報錯</li>\n</ul>\n<h2># 參考用書</h2>\n<p><a href=\"https://www.tenlong.com.tw/products/9786263332973\" target=\"_blank\" rel=\"noopener\">看完這本就會懂！帶你無痛提升 JavaScript 面試力</a></p>",
      "title": "JS核心觀念讀書會筆記 I - 變數與作用域",
      "postType": "讀書筆記",
      "category": "code",
      "description": "var, let, const 變數宣告、變數作用域、提升觀念釐清",
      "imageUrl": "https://i.imgur.com/IAsokcJ.png",
      "id": 9
    },
    {
      "author": "JamJam",
      "imageListUrl": [],
      "isPublic": true,
      "tag": [
        "JavaScript",
        "陳述式",
        "表達式",
        "運算子",
        "核心觀念",
        "前端"
      ],
      "createAt": 1687737600,
      "title": "JS核心觀念讀書會筆記 II - 陳述式、表達式與運算子",
      "postType": "讀書筆記",
      "category": "code",
      "description": "釐清陳述式與表達式的定義和用法；ASI 自動插入分號機制；運算子操作、優先性與相依性",
      "imageUrl": "https://i.imgur.com/weteIiF.jpg",
      "content": "<h2>一、陳述式 vs. 表達式</h2>\n<h3>1.1 表達式 (Expression)</h3>\n<p>&rarr; 會回傳值</p>\n<ul>\n<li>純值 e.g. <code>1</code> , <code>true</code>, <code>[]</code></li>\n<li>變數</li>\n<li>運算子 (須搭配運算元) e.g. <code>1+1</code>, <code>true ? 1 : 2</code>, <code>delete a</code>, <code>1===1</code></li>\n<li>執行函式 e.g. <code>fn()</code></li>\n<li>正規表達式 e.g. <code>/[a-z]{2,}.*/</code></li>\n<li>函式表達式 e.g.<code>(function(a, b) {})</code></li>\n</ul>\n<h3>1.2 陳述式 (statement)</h3>\n<p>&rarr; 不會回傳值 ， 陳述式可能是片段，裡面也可能包含表達式 (混合結構)</p>\n<ul>\n<li>宣告 e.g.<code>var</code> , <code>const</code>, <code>let</code>, <code>function</code></li>\n<li>流程控制 e.g. <code>block</code>, <code> if&hellip;else</code></li>\n<li>迴圈 e.g. <code>for</code>, <code>for&hellip;in</code></li>\n<li>其他 e.g.<code>import</code>, <code>export</code></li>\n</ul>\n<h3>1.3 應用情境</h3>\n<p>舉 if 判斷式為例，<code>()</code> 內必須放入表達式，否則會出錯</p>\n<p>&nbsp;</p>\n<h2>二、函式陳述式 vs. 函式表達式 (function declaration vs. function expression)</h2>\n<h3>2.1 加入小括號，函式陳述式就變表達式</h3>\n<pre><code>// 函式陳述式\nfunction fn() {\n\treturn true\n}\n\n// 函式表達式\n(function fn1() {\n\treturn true\n})\n\n// 函式表達式可賦值到變數上\nvar fn2 = function fn2() {\n\treturn true\n}</code></pre>\n<div class=\"callout callout-pink flex\">\n<p>💡</p>\n<p>function 結構 可以是 函式陳述式，也可以是 函式表達式，端看是否可回傳整個函式</p>\n</div>\n<h4 class=\"font-bold text-secondary-dark\">⚠ 超重要陷阱題</h4>\n<pre><code>// 看似陳述式，實則表達式的 condition ！！！\n\nif (function fn1()) {\n\tconsole.log('此行可以運作')  // '此行可以運作'\n}</code></pre>\n<h3>2.2 具名函式 vs. 匿名函式</h3>\n<p>&rarr; 函式陳述式一定要具名，函式表達式看它心情</p>\n<p>&rarr; 函式表達式命名了也無法在外部取用，所以通常不會取名(匿名)</p>\n<p>&nbsp;</p>\n<h2>三、ASI 自動插入分號 (Auto Semicolon Insertion)</h2>\n<p>&rarr; JS 本身有 ASI 機制，但在部份情況會失效，便會出錯！！</p>\n<p>&rarr; return、break、continue、throw 關鍵字後自動插入分號</p>\n<p>&nbsp;</p>\n<h3>3.1 (前一行) 不自動加入分號的情境</h3>\n<ul>\n<li>新的一行開頭是 <code>(</code>、<code>[</code>、<code>/</code>，會直接出錯無法執行\n<pre><code>var a = 1\nvar b = a\n(a+b).toString() // Uncaught TypeError\n(function() {})() // Uncaught TypeError</code></pre>\n<pre><code>var a = 1\nvar b = a\n/[0-9]+/.test(b) // Uncaught SyntaxError</code></pre>\n</li>\n<li>新的一行開頭是 <code>+</code>、<code>-</code>、<code>*</code>、<code>%</code>，不會出錯，但運算不如預期\n<pre><code>var a = 2\nvar b = a\n+a\n\nconsole.log(b) // 4</code></pre>\n</li>\n<li>新的一行開頭是 <code>,</code>、<code>.</code>，不會出錯，但結果不如預期\n<pre><code>var a = 2\nvar b = a\n.toString()\n\nconsole.log(b)  // '2'\n\nvar c = 1\n,d = 2  // d 會一起被 var 宣告</code></pre>\n</li>\n</ul>\n<h3>3.2 Standard JS 寫法</h3>\n<ul>\n<li>改在立即函式前面加上;\n<pre><code>;(function fn(){\n\tconsole.log('ok')\n})()</code></pre>\n</li>\n</ul>\n<p>&nbsp;</p>\n<h2>四、運算子</h2>\n<p>&rarr; 至少需要搭配一個運算元才能執行 e.g 一元運算子 <code>typeof</code> &lsquo;小明&rsquo;</p>\n<p>&rarr; 運算子是表達式的一種，會回傳結果</p>\n<p>&nbsp;</p>\n<h3>4.1 先賦值再回傳 vs. 先回傳再賦值</h3>\n<p>&rarr; <code>++a</code> 先賦值再回傳；<code>a++</code> 先回傳再賦值</p>\n<h3>4.2 回傳值不一定等同於賦值 ⭐</h3>\n<p>&rarr; 等號運算子 傳遞的是 回傳值</p>\n<pre><code>const person = {\n\tname: '小明'\n}\n\nObject.freeze(person) // 凍結物件，屬性無法再被賦值\n\nconst newName = person.name = '恩娣'\nconsole.log(newName)  // '恩娣'</code></pre>\n<div class=\"callout callout-pink flex\">\n<p>💡</p>\n<p>實戰中不建議使用連續賦值的原因<br>1. 結果不如預期：運算子 傳遞的是 回傳值 <br>2. 中間變數沒宣告：會變成全域屬性</p>\n</div>\n<pre><code>(function () {\n\tconst a = b = '小明'\n})()\n\nconsole.log(b)  // '小明'</code></pre>\n<p>&nbsp;</p>\n<h2>五、優先性與相依性</h2>\n<ul>\n<li>運算子優先性 Operator precedence：決定先後順序</li>\n<li>相依性 Associativity ：決定執行方向</li>\n</ul>",
      "id": 10
    },
    {
      "author": "JamJam",
      "imageListUrl": [],
      "isPublic": true,
      "tag": [
        "JavaScript",
        "型別",
        "核心觀念",
        "前端"
      ],
      "createAt": 1688342400,
      "title": "JS核心觀念讀書會筆記 III - 型別",
      "postType": "讀書筆記",
      "category": "code",
      "description": "型別這章節偏複雜，比對、運算、真假值的規則都不太一樣🌵，有很多細節跟特例，需要多看幾次 👀",
      "imageUrl": "https://i.imgur.com/fmrhmu4.jpg",
      "content": "<h2>一、原始型別 vs. 物件型別</h2>\n<h3>1.1 原始型別無法增加屬性，共七種</h3>\n<p><code>Boolean</code>, <code>Number</code>, <code>String</code>, <code>Null</code>, <code>Undefined</code>, <code>Symbol</code>, <code>BigInt</code></p>\n<h3>1.2 其他通通都是 物件型別</h3>\n<pre><code>typeof []  // object\ntypeof {}  // object</code></pre>\n<h3>1.3 typeof 特例</h3>\n<pre><code>typeof null  // object  (javascript 的 bug )\ntypeof function() {}  // function  (但實際上是 object 型別)</code></pre>\n<p>&nbsp;</p>\n<h2>二、型別轉換</h2>\n<h3>2.1 顯性轉換</h3>\n<ol>\n<li>① 原始型別包裹物件 &amp; 原型方法\n<ul>\n<li>原始型別包裹物件 &rarr; <code>Number()</code>, <code>String()</code>, <code>Boolean()</code>, <code>Symbol()</code>, <code>BigInt()</code></li>\n<li>原型方法 &rarr; <code>.toString()</code>\n<pre><code>// undefined, null 沒有原型方法，所以不能用 toString()\n// String() 相對比較穩定\n\nconsole.log(String(undefined)) // 'undefined'\nconsole.log(undefined.toString()) // Cannot read properties of undefined (reading 'toString')\nconsole.log(null.toString())  // // Cannot read properties of null (reading 'toString')</code></pre>\n</li>\n<li><code>parseInt()</code> 比 <code>Number()</code> 穩定；<code>parseInt() </code>方法 除了在 <code>Number</code>，也有在全域下\n<pre><code>// 50 \n\nconsole.log(Number('50元'))  // NaN\nconsole.log(Number.parseInt('50元', 10))  // 50\nconsole.log(parseInt('50元', 10))  // 50</code></pre>\n</li>\n</ul>\n</li>\n<li>② 轉換成數字型別：正負運算子 ( <code>+</code>、<code>-</code>一元運算子)\n<pre><code>+'50'  // 50\n+'50元'  // NaN\n+true  // 1\n-undefined // NaN  ✍\n+null  // 0  ✍\n\n//  (物件型別會先轉成字串，再轉為數字)  ✍\n-[]  // 0 \n-[3] // -3\n-{}  // NaN  ✍\n\n// Symbol, BigInt 不能轉型！！！✍\n+Symbol(1) // Uncaught TypeError: Cannot convert a Symbol value to a number\n+100n  // Uncaught TypeError: Cannot convert a BigInt value to a number</code></pre>\n</li>\n<li>③ 轉換成布林值：<code>Boolean</code> 包裹物件、<code>!</code>運算子\n<pre><code>!null // true\n!undefined // true\n!!undefined // false\n!!'1'  // true ✍ 實戰中常見的轉型方法\n\n!Boolean(0)  // true\n! new Boolean(0)  // false ✍ 實戰中絕對不要亂用 new 函式建構子 會出意外滴 ~~\n\n!![]  // true\n!!{}  // true\n\n!Symbol(1) // false ✍\n!!100n  // true</code></pre>\n</li>\n</ol>\n<h3>2.2 隱性轉換</h3>\n<ol>\n<li>① <code>+</code>運算子 (二元運算子)\n<ul>\n<li>只要前後運算元有一個是字串或物件型別，則視為 字串運算子；否則作為 算數運算子</li>\n<li>字串運算子：先分別轉型成字串，再合併字串</li>\n<li>算數運算子：先分別轉型成數字，再相加</li>\n<li>例外： <code>Symbol</code>,<code> BigInt </code>不會轉型\n<ul>\n<li><code>BigInt</code> 自己相加，會維持 <code>BigInt</code> 型態 ( <code>BigInt</code> 只愛自己國的人)</li>\n<li><code>Symbol</code> 則是完全無法相加 (<code>Symbol</code> 只能獨自一人 )</li>\n</ul>\n</li>\n</ul>\n<pre><code>[1, 2] + [3, 4]  // 1,23,4\n1 + {a: 1}  // 1[Object Object]\n1 + function() {}  // 1function() {}\n\n1 + true  // 2\n1 + undefined  // NaN\n1 + null  // 1\nnull + null  // 0\nnull + true // 1\n\n// 例外 Symbol, BigInt 無法轉型成 Number 或 String ✍\n\n1 + Symbol('1')  // Uncaught TypeError: Cannot convert a Symbol value to a number\n'1' + 100n  // Uncaught TypeError: Cannot convert a BigInt value to a string\n\n10n + 20n  // 30n\nSymbol(1) + Symbol(2)  // Uncaught TypeError: Cannot convert a Symbol value to a number</code></pre>\n</li>\n<li>② 其他算數運算子 ( <code>-</code>, <code>*</code> , <code>/</code>)\n<ul>\n<li>一律會將其他型別轉型成 <code>Number</code> ，再進行運算</li>\n<li>例外： <code>Symbol</code>, <code>BigInt</code> 不會轉型成 <code>Number</code> ，使用情況跟 <code>+</code> 運算子相同</li>\n<li>注意： 物件型別轉成 <code>Number</code> 前，都會先轉 <code>String</code> ！！！</li>\n</ul>\n<pre><code>100 - [12]  // 88\n100 - {}  // NaN\n[1, 2] - [2]  // NaN</code></pre>\n</li>\n</ol>\n<p>&nbsp;</p>\n<h2>三、型別比較</h2>\n<h3>3.1 嚴格相等 ( === )</h3>\n<p>&rarr; 型別相同 且 值 相同，才會回傳 <code>true</code> ，但存在一些例外</p>\n<p>例外：</p>\n<p>①<code> NaN</code>不等於 <code>NaN</code> (嚴格、寬鬆皆不相等)</p>\n<p>② <code>+0 === -0</code></p>\n<p>③ 物件型別 比較 參考位置，所以 `{}` 不等於 `{}` (嚴格、寬鬆皆不相等)</p>\n<p>④&nbsp;<code>new Number(0)</code> 不等於 <code>new Number(0)</code> ：<code>new</code> 運算子建立的會是 物件型別，故同理不相等 (嚴格、寬鬆皆不相等)</p>\n<p>⑤ <code>undefined</code> 不等於 <code>null</code>：這兩個有點煩，嚴格不相等(因為型別不同)，但寬鬆相等</p>\n<h3>3.2 寬鬆相等 (==)</h3>\n<p>① <code>Number</code>, <code>String</code>, <code>Boolean</code> 比對，通通使用 Number 進行轉型</p>\n<pre><code>// 神奇的16進位\n\n17 == '0x11'  // true</code></pre>\n<p>② <code>Null</code>, <code>Undefined</code> 比對時幾乎不轉型，只跟彼此是真愛 (<code>true</code>)</p>\n<pre><code>null == 0 // false\nundefined == false // false\nundefined == null // true (彼此寬鬆相等，但嚴格不相等)\nundefined == undefined  //true (undefined, null 自己跟自己比較都嚴格相等)</code></pre>\n<p>③ 跟 <code>BigInt</code> 比對的值，也會轉型成 <code>BigInt</code></p>\n<p>&rarr; <code>BigInt</code> 跟 <code>Number</code> 的差異：不存在 <code>NaN</code>、沒有小數點、沒有最大值</p>\n<pre><code>100n == 100  // true\n100n == 100.2  // false\n100n == NaN  // false  NaN 跟任何值比較均為 false</code></pre>\n<p>④<code> Symbol</code> 比對概念類似物件型態 (傳參考)</p>\n<p>⑤ 物件型別跟其他型別比較時，會透過 &ldquo; 包裹物件&rdquo; 將自己轉為跟對方相同的型別</p>\n<p>&rarr; 但 <span style=\"text-decoration: underline;\"><code>null</code> 跟 <code>undefined</code> 都沒有包裹物件，所以跟任何物件型別比較都會是 <code>false</code></span></p>\n<pre><code>10 == [10]  // true\n'a, b' == [a, b]  // true\n10n == ['10']  // true\n\n{} == '[Object Object]'  // true\n\nnull == []  // false\nundefined == {}  // false</code></pre>\n<p>&nbsp;</p>\n<h2>四、真值與假值</h2>\n<h3>4.1 假值共 6 種，其他都是真值</h3>\n<p>① <code>0</code>, <code>-0</code>, <code>0n</code>：所有 0 皆為假值</p>\n<p>② <code>NaN</code></p>\n<p>③ <code>null</code>, <code>undefined</code></p>\n<p>④ <code>&ldquo;&rdquo;</code>：空字串</p>\n<p>⑤ <code>document.all</code>：此屬性已被棄用</p>\n<p>⑥ <code>false</code></p>\n<p>&nbsp;</p>",
      "id": 11
    },
    {
      "author": "JamJam",
      "imageListUrl": [],
      "isPublic": true,
      "tag": [
        "JavaScript",
        "async",
        "promise",
        "非同步",
        "前端"
      ],
      "createAt": 1684454400,
      "content": "<h2 id=\"前情提要：sync同步-vs-async異步\">💡 前情提要：Sync(同步) vs. Async(異步)</h2>\n<ul>\n<li>Synchronous 同步：一次只能處理一件事，完成後才輪到下一項</li>\n<li>Asynchronous 異步、非同步：不用等到事情完成才能處理下件事</li>\n</ul>\n<h2 id=\"asyncawait\">一、async/await</h2>\n<ul>\n<li><strong>async/await 是 promise 的語法糖</strong>：用 async 宣告回傳一個 promise</li>\n<li>async 是用來讓異步的 promise 可以仿效 sync 的方式(synchronous-looking)運行 (到底是誰發明的奇怪繞口令稱呼 = = )</li>\n<li>await 會讓程式碼等待 promise 完成後才回傳</li>\n<li>減少巢狀 .then 的 return</li>\n</ul>\n<p>&nbsp;</p>\n<h2 id=\"asyncawait-語法\">二、async/await 語法</h2>\n<pre><code class=\"language-javascript!\">async function example2() {\n  try {\n      return await new Promise((resolve, reject) =&gt; {\n          throw new Error('Oops!');\n      });\n  } catch (err) {\n      console.error(err);\n  }\n}</code></pre>\n<p>&nbsp;</p>\n<h2 id=\"asyncawait-範例\">三、async/await 範例</h2>\n<pre><code class=\"language-javascript!\">// The 'async' keyword allows the use of 'await' inside the function\nbutton.addEventListener('click', async () =&gt; {\n    // Show a loading spinner\n    spinner.style.display = 'block';\n\n    try {\n        // Fetch data from server\n        let response = await fetch('https://api.example.com/items');\n\n        // Parse the JSON response\n        let items = await response.json();\n\n        // Update the UI with the new items\n        displayItems(items);\n    } catch (error) {\n        // Handle any errors\n        console.error('Error:', error);\n    } finally {\n        // Hide the loading spinner\n        spinner.style.display = 'none';\n    }\n});\n</code></pre>\n<h3 id=\"參考文章\">參考文章</h3>\n<ul>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10305527?sc=iThelpR\">https://ithelp.ithome.com.tw/articles/10305527?sc=iThelpR</a></li>\n</ul>",
      "title": "Async/Await：更簡便的 Promise 寫法",
      "postType": "語法觀念",
      "category": "code",
      "description": "async/await 是 promise 的語法糖：用 async 宣告回傳一個 promise，是用來讓異步的 promise 可以仿效 sync 的方式",
      "imageUrl": "https://i.imgur.com/8CRBNzE.jpg",
      "id": 12
    },
    {
      "author": "JamJam",
      "imageListUrl": [],
      "isPublic": true,
      "tag": [
        "JavaScript",
        "閉包",
        "高階函式",
        "前端"
      ],
      "createAt": 1698710400,
      "title": "前端效能優化一點通：Debounce(防抖) & Throttle(節流)",
      "postType": "實例應用",
      "category": "code",
      "description": "Debounce(防抖) & Throttle(節流)是前端面試很常見的問題。Debounce，又被稱為防抖，指的是當使用者至少停頓一段時間沒有動作時，才觸發函式；Throttle，又稱為節流，指的是在指定時間內，不管呼叫幾次，都只觸發一次函式。本文將分享兩者程式碼與各自的經典應用，讓你不再混淆！",
      "imageUrl": "https://i.imgur.com/HHFYSV6.jpg",
      "content": "<h2 id=\"-debounce-throttle\">一、簡述 Debounce 和 Throttle</h2>\n<p>Debounce 和 Throttle 都是一種延遲執行的技巧，通常用在使用者會高頻率觸發，但又不是每次觸發都需要回應時。減少過度頻繁傳送請求，能減輕伺服器負擔，以提高性能與使用者體驗。</p>\n<p>Debounce，又被稱為防抖，指的是當使用者至少停頓一段時間沒有動作時，才觸發函式；Throttle，又稱為節流，指的是在指定時間內，不管呼叫幾次，都只觸發一次函式。</p>\n<h2 id=\"-debounce-\">二、Debounce 防抖</h2>\n<h3 id=\"-\">定義</h3>\n<p>如果 n 秒(毫秒)內沒有被重複呼叫，才執行此函式。如果時間還沒等到 n 秒(毫秒)就再次呼叫，則時間會歸零，直到重新等到 n 秒(毫秒)後，才執行</p>\n<blockquote>\n<p>Debouncing enforces that a function not be called again until a certain amount of time has passed without it being called.</p>\n</blockquote>\n<p>舉例來說： Jane 是個傲嬌的人，討厭被頻繁問候，如果跟她打招呼不等待一秒鐘以上，她就不會回應你；但只要掌握停頓一秒鐘的原則，就可以順利得到回應。</p>\n<p><img src=\"https://i.imgur.com/fElAMy2.png\" alt=\"debounce 示意圖1\"></p>\n<p><img src=\"https://i.imgur.com/wGHJDiz.png\" alt=\"debounce 示意圖2\"></p>\n<h3 id=\"-\">常見應用</h3>\n<ul>\n<li>Input event (e.g. 搜尋關鍵字即時提示、表單驗證)： 如果使用者一打字(或注音符號、拼音、字母等等)就發送搜尋、驗證請求，可能會出現許多惱人且不必要的提示，不僅造成使用者困擾，且會使瀏覽器卡頓；因此當使用者停頓一段時間不再輸入，才發送請求，可以優化使用情境。</li>\n<li>window resize</li>\n</ul>\n<h3 id=\"-\">程式碼範例</h3>\n<ul>\n<li>先備知識：<a href=\"https://hackmd.io/@ch11se/SkTAwsRyn\">閉包與高階函式</a>\n<pre><code class=\"lang-javascript!\"><span class=\"hljs-keyword\">const</span> debounce = <span class=\"hljs-function\">(<span class=\"hljs-params\">callback, time = <span class=\"hljs-number\">1500</span></span>) =&gt;</span> {\n<span class=\"hljs-keyword\">let</span> timer;\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> {\n  clearTimeout(timer);\n  timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> callback(...args), time);\n};\n};\n</code></pre>\n</li>\n<li>Input debounce 範例\n<pre><code class=\"lang-html!\">&lt;h1&gt;Default: <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'default'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\n&lt;h2&gt;Debounce: <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'debounce'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span>\n&lt;label <span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">\"input\"</span>&gt;Input: <span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'input'</span>&gt;</span></span>\n</code></pre>\n<pre><code class=\"lang-javascript!\"><span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-built_in\">document</span>.<span class=\"hljs-built_in\">querySelector</span>(<span class=\"hljs-string\">\"#input\"</span>);\n<span class=\"hljs-keyword\">const</span> defaultValue = <span class=\"hljs-built_in\">document</span>.<span class=\"hljs-built_in\">querySelector</span>(<span class=\"hljs-string\">\"#default\"</span>);\n<span class=\"hljs-keyword\">const</span> debounceValue = <span class=\"hljs-built_in\">document</span>.<span class=\"hljs-built_in\">querySelector</span>(<span class=\"hljs-string\">\"#debounce\"</span>);\n\n<span class=\"hljs-keyword\">const</span> debounce = (callback, time = <span class=\"hljs-number\">1500</span>) =&gt; {\n  ... <span class=\"hljs-comment\">// 同上</span>\n};\n\n<span class=\"hljs-keyword\">const</span> renderDefaultText = (text) =&gt; {\n  defaultValue.textContent = text;\n};\n\n<span class=\"hljs-keyword\">const</span> renderDebounceText = debounce((text) =&gt; {\n  debounceValue.textContent = text;\n});\n\ninput.addEventListener(<span class=\"hljs-string\">\"input\"</span>, (e) =&gt; {\n  renderDefaultText(e.target.value);\n  renderDebounceText(e.target.value);\n});\n</code></pre>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://codepen.io/guaguagua-duck/pen/PoVNpBY\">Debounce 實作 - codepen</a></li>\n</ul>\n<h2 id=\"throttle-\">三、Throttle 節流</h2>\n<h3 id=\"-\">定義</h3>\n<p>每 n 秒(毫秒)內如果函式被多次觸發，只會立即執行第一次。</p>\n<blockquote>\n<p>Throttling is used to call a function after a particular interval of time only the first click is executed immediately.</p>\n</blockquote>\n<p>舉例來說： Jane 的妹妹 Ann 也討厭被頻繁問候，但她的作法是像機器人，每五分鐘只回應一次，如果五分鐘內收到100次問候，剩下的99次她會充耳不聞，直到下個五分鐘到來，有新的問候才會再次回應。</p>\n<h3 id=\"-\">常見應用</h3>\n<p>使用 infinitely scroll (無限滾動)載入新資料</p>\n<ul>\n<li>由於每次滾動都判斷是否已滑到底部(範例是用頁面的90%)，太浪費效能，因此利用 throttle，每隔一秒再執行 scroll 函式，減輕瀏覽器負擔~</li>\n</ul>\n<h3 id=\"-\">程式碼範例</h3>\n<pre><code class=\"lang-javascript!\"><span class=\"hljs-keyword\">const</span> throttle = <span class=\"hljs-function\">(<span class=\"hljs-params\">callback, time = <span class=\"hljs-number\">1000</span></span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> timer;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (timer) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n      callback();\n      timer = <span class=\"hljs-literal\">null</span>;\n    }, time);\n  };\n};\n</code></pre>\n<ul>\n<li>infinitely scroll (無限滾動)範例</li>\n</ul>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'result'</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Lorem ipsum dolor,<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Lorem ipsum dolor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Lorem ipsum dolor, si<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Lorem ipsum <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Lorem ipsum dolor, sit amet <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Lorem ipsum dolor, sit.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Lorem ipsum d.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Lorem ip<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</code></pre>\n<pre><code class=\"lang-javascript!\"><span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#result\"</span>);\n\n<span class=\"hljs-keyword\">const</span> scroll = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-comment\">//   「內容」被捲動的距離，也就是內容頂端和捲軸頂端的相對距離</span>\n  <span class=\"hljs-keyword\">const</span> scrollTop = <span class=\"hljs-built_in\">Math</span>.max(\n    <span class=\"hljs-built_in\">window</span>.pageYOffset,\n    <span class=\"hljs-built_in\">document</span>.documentElement.scrollTop,\n    <span class=\"hljs-built_in\">document</span>.body.scrollTop\n  );\n<span class=\"hljs-comment\">//  網頁的可視高度</span>\n  <span class=\"hljs-keyword\">const</span> innerHeight = <span class=\"hljs-built_in\">window</span>.innerHeight\n  <span class=\"hljs-comment\">//   元素所包含的「子元素」的「完整」高度，其中包含了超出捲軸之外的部分的高度。在沒有捲軸的情況下，這個值就等於　clientHeight。</span>\n  <span class=\"hljs-keyword\">const</span> scrollHeight = <span class=\"hljs-built_in\">Math</span>.max(\n    <span class=\"hljs-built_in\">document</span>.body.scrollHeight,\n    <span class=\"hljs-built_in\">document</span>.documentElement.scrollHeight\n  );\n\n  <span class=\"hljs-keyword\">if</span> ((scrollTop + innerHeight) / scrollHeight &gt;= <span class=\"hljs-number\">0.9</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'...bottom'</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n      <span class=\"hljs-keyword\">const</span> element = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"li\"</span>);\n      element.innerHTML = <span class=\"hljs-string\">\"&lt;p&gt;123434&lt;/p&gt;\"</span>;\n      result.appendChild(element);\n    }\n  }\n};\n\n<span class=\"hljs-keyword\">const</span> throttle = <span class=\"hljs-function\">(<span class=\"hljs-params\">callback, time = <span class=\"hljs-number\">1000</span></span>) =&gt;</span> {\n  ... <span class=\"hljs-comment\">// 同上</span>\n};\n\n<span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">\"scroll\"</span>, throttle(scroll));<br>\n</code></pre>\n<ul>\n<li><a href=\"https://codepen.io/guaguagua-duck/pen/oNmxaRj\">Throttle 實作無限滾動 - codepen</a></li>\n</ul>\n<h3 id=\"-\">參考資料</h3>\n<ul>\n<li><a href=\"https://github.com/YvetteLau/Step-By-Step/issues/10\">防抖(debounce)函数的作用是什么？有哪些应用场景，请实现一个防抖函数。</a></li>\n<li><a href=\"https://youtu.be/vCLobXMROZg?si=88rPgWqpApngRo8B\">YouTube: JavaScript - Debounce (防抖) 常見的面試問題 (Search Bar, API Request) (前端優化)</a></li>\n<li><a href=\"https://youtu.be/IU83Qjax1AI?si=0K9dB9nErNdOZMck\">YouTube: JavaScript - Throttle (節流) 常見的面試問題 (Scrollbar, Infinite Scroll) (前端優化)</a></li>\n</ul>",
      "id": 13
    }
  ],
  "users": [
    {
      "email": "j1999j88@gmail.com",
      "password": "$2a$10$TCltvGlR8rulLtLAx0WqY.wb2CekgjS04hcjihdQcTCmxNv.Heu0O",
      "id": 1
    }
  ]
}
